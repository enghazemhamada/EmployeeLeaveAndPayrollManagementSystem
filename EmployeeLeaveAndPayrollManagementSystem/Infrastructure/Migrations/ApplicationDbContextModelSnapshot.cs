// <auto-generated />
using System;
using EmployeeLeaveAndPayrollManagementSystem.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EmployeeLeaveAndPayrollManagementSystem.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EmployeeLeaveAndPayrollManagementSystem.Features.Accounts.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "10",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "924127c7-1f0b-495c-8e1e-abe2314e817a",
                            Email = "admin@test.com",
                            EmailConfirmed = true,
                            EmployeeId = 1,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@TEST.COM",
                            NormalizedUserName = "ADMIN@TEST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMKHRfiovUPctg2u4VcDoqNZjP7UM+m547xT7vY0xAZ7rtObqEW+i3tGNr05G7gBxw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "71ec5ebc-b842-4aa2-8870-9440f626aa38",
                            TwoFactorEnabled = false,
                            UserName = "admin@test.com"
                        },
                        new
                        {
                            Id = "11",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0e3ffc56-ceeb-4a50-b337-8d7dd33d969a",
                            Email = "manager@test.com",
                            EmailConfirmed = true,
                            EmployeeId = 2,
                            LockoutEnabled = false,
                            NormalizedEmail = "MANAGER@TEST.COM",
                            NormalizedUserName = "MANAGER@TEST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELHeIKzlWA4gabQKmjrY+7SG9/YuHPWDaMD6FmLveN7/jPpEtQ5NwbD+rjOzeUVonA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c9009611-4ea5-4bba-aeb0-e25b63c80e41",
                            TwoFactorEnabled = false,
                            UserName = "manager@test.com"
                        },
                        new
                        {
                            Id = "12",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2403f745-a9d1-4c69-ac17-8ea80bb8d6ef",
                            Email = "employee@test.com",
                            EmailConfirmed = true,
                            EmployeeId = 3,
                            LockoutEnabled = false,
                            NormalizedEmail = "EMPLOYEE@TEST.COM",
                            NormalizedUserName = "EMPLOYEE@TEST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFe39tKiG4tRHXrh1TO0QxCZZQ+HzzbWZwQLbke5bJ2K7Mvqf+ZBzMdxJ9WHQGItlg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1462bd64-fe3c-456f-93b9-86b96a182273",
                            TwoFactorEnabled = false,
                            UserName = "employee@test.com"
                        },
                        new
                        {
                            Id = "13",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a54d9b59-6683-4a16-8576-5bcd355b61fd",
                            Email = "hr@test.com",
                            EmailConfirmed = true,
                            EmployeeId = 4,
                            LockoutEnabled = false,
                            NormalizedEmail = "HR@TEST.COM",
                            NormalizedUserName = "HR@TEST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGPvhxcVapOyZNw1gsfhuDG6PAVVR/tYm8rKGtw53iTu8E0vyY7Jd6ZI8TLq424/iA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d490b3df-4ff7-4a72-a962-e5c5a69e7917",
                            TwoFactorEnabled = false,
                            UserName = "hr@test.com"
                        });
                });

            modelBuilder.Entity("EmployeeLeaveAndPayrollManagementSystem.Features.Employees.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BaseSalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LeaveBalance")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LeaveDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BaseSalary = 0m,
                            Department = "IT",
                            HireDate = new DateTime(2025, 10, 7, 21, 53, 54, 546, DateTimeKind.Local).AddTicks(6795),
                            LeaveBalance = 0,
                            Name = "Hazem Hamada",
                            Position = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            BaseSalary = 15000m,
                            Department = "Sales",
                            HireDate = new DateTime(2025, 10, 7, 21, 53, 54, 546, DateTimeKind.Local).AddTicks(6872),
                            LeaveBalance = 20,
                            Name = "Ahmed Manager",
                            Position = "Sales Manager"
                        },
                        new
                        {
                            Id = 3,
                            BaseSalary = 8000m,
                            Department = "Support",
                            HireDate = new DateTime(2025, 10, 7, 21, 53, 54, 546, DateTimeKind.Local).AddTicks(6887),
                            LeaveBalance = 15,
                            ManagerId = 2,
                            Name = "Omar Employee",
                            Position = "Support Engineer"
                        },
                        new
                        {
                            Id = 4,
                            BaseSalary = 12000m,
                            Department = "HR",
                            HireDate = new DateTime(2025, 10, 7, 21, 53, 54, 546, DateTimeKind.Local).AddTicks(6902),
                            LeaveBalance = 18,
                            Name = "Sara HR",
                            Position = "HR Specialist"
                        });
                });

            modelBuilder.Entity("EmployeeLeaveAndPayrollManagementSystem.Features.Leaves.LeaveRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("LeaveRequests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EmployeeId = 3,
                            EndDate = new DateTime(2025, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Reason = "Family vacation",
                            StartDate = new DateTime(2025, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0,
                            Type = 0
                        });
                });

            modelBuilder.Entity("EmployeeLeaveAndPayrollManagementSystem.Features.Payrolls.Allowance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PayrollId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PayrollId");

                    b.ToTable("Allowances");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 1000m,
                            PayrollId = 1,
                            Type = "Bonus"
                        },
                        new
                        {
                            Id = 2,
                            Amount = 1000m,
                            PayrollId = 1,
                            Type = "Commission"
                        });
                });

            modelBuilder.Entity("EmployeeLeaveAndPayrollManagementSystem.Features.Payrolls.Deduction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PayrollId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PayrollId");

                    b.ToTable("Deductions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 300m,
                            PayrollId = 1,
                            Type = "Tax"
                        },
                        new
                        {
                            Id = 2,
                            Amount = 200m,
                            PayrollId = 1,
                            Type = "Insurance"
                        });
                });

            modelBuilder.Entity("EmployeeLeaveAndPayrollManagementSystem.Features.Payrolls.Payroll", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BaseSalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<decimal>("NetPay")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalAllowances")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalDeductions")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Payrolls");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BaseSalary = 15000m,
                            EmployeeId = 3,
                            Month = 9,
                            NetPay = 16500m,
                            TotalAllowances = 2000m,
                            TotalDeductions = 500m,
                            Year = 2025
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "HR",
                            NormalizedName = "HR"
                        },
                        new
                        {
                            Id = "3",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "4",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "10",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "11",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "12",
                            RoleId = "4"
                        },
                        new
                        {
                            UserId = "13",
                            RoleId = "2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EmployeeLeaveAndPayrollManagementSystem.Features.Accounts.ApplicationUser", b =>
                {
                    b.HasOne("EmployeeLeaveAndPayrollManagementSystem.Features.Employees.Employee", "Employee")
                        .WithOne("User")
                        .HasForeignKey("EmployeeLeaveAndPayrollManagementSystem.Features.Accounts.ApplicationUser", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("EmployeeLeaveAndPayrollManagementSystem.Features.Employees.Employee", b =>
                {
                    b.HasOne("EmployeeLeaveAndPayrollManagementSystem.Features.Employees.Employee", "Manager")
                        .WithMany("Team")
                        .HasForeignKey("ManagerId");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("EmployeeLeaveAndPayrollManagementSystem.Features.Leaves.LeaveRequest", b =>
                {
                    b.HasOne("EmployeeLeaveAndPayrollManagementSystem.Features.Employees.Employee", "Employee")
                        .WithMany("LeaveRequests")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("EmployeeLeaveAndPayrollManagementSystem.Features.Payrolls.Allowance", b =>
                {
                    b.HasOne("EmployeeLeaveAndPayrollManagementSystem.Features.Payrolls.Payroll", "Payroll")
                        .WithMany("Allowances")
                        .HasForeignKey("PayrollId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payroll");
                });

            modelBuilder.Entity("EmployeeLeaveAndPayrollManagementSystem.Features.Payrolls.Deduction", b =>
                {
                    b.HasOne("EmployeeLeaveAndPayrollManagementSystem.Features.Payrolls.Payroll", "Payroll")
                        .WithMany("Deductions")
                        .HasForeignKey("PayrollId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payroll");
                });

            modelBuilder.Entity("EmployeeLeaveAndPayrollManagementSystem.Features.Payrolls.Payroll", b =>
                {
                    b.HasOne("EmployeeLeaveAndPayrollManagementSystem.Features.Employees.Employee", "Employee")
                        .WithMany("Payrolls")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EmployeeLeaveAndPayrollManagementSystem.Features.Accounts.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EmployeeLeaveAndPayrollManagementSystem.Features.Accounts.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EmployeeLeaveAndPayrollManagementSystem.Features.Accounts.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EmployeeLeaveAndPayrollManagementSystem.Features.Accounts.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EmployeeLeaveAndPayrollManagementSystem.Features.Employees.Employee", b =>
                {
                    b.Navigation("LeaveRequests");

                    b.Navigation("Payrolls");

                    b.Navigation("Team");

                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("EmployeeLeaveAndPayrollManagementSystem.Features.Payrolls.Payroll", b =>
                {
                    b.Navigation("Allowances");

                    b.Navigation("Deductions");
                });
#pragma warning restore 612, 618
        }
    }
}
